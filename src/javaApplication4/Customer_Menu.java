
package javaApplication4;

import classes.Customer;
import classes.*;
import java.io.*;
import java.util.*;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Customer_Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    private static final String menufile = "src/resources/MenuItem.txt";
    private Customer customer;
    private Vendor vendor;
    private List<MenuItem> currentOrderItems = new ArrayList<>();
    private FileManager fm;
    
    public Customer_Menu() {
        initComponents();
        this.fm = new FileManager();
    }
    
    public Customer_Menu(Customer customer) {
        
        initComponents();
        this.customer = customer;
        
        mpName.setText(this.customer.getName());
        this.fm = new FileManager();
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mpName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        mpCuisine = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mpDescription = new javax.swing.JTextField();
        mpAdd = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        mpPrice = new javax.swing.JTextField();
        mpFoodName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        mpTotal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        mpSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuItemTable = new javax.swing.JTable();
        mpRemove = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        cuisineCombobox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        diningOptionComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        mpClass = new javax.swing.JTextField();
        payButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reviewsArea = new javax.swing.JTextArea();
        avgRatingsField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/menu (1).png"))); // NOI18N
        jLabel2.setText("Menu Page");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 18))); // NOI18N
        jPanel2.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 0));
        jLabel4.setText("NAME:");

        mpName.setEditable(false);
        mpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpNameActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 153, 0));
        jLabel7.setText("Cuisine");

        mpCuisine.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 153, 0));
        jLabel8.setText("Food Name");

        mpDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpDescriptionActionPerformed(evt);
            }
        });

        mpAdd.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        mpAdd.setText("ADD");
        mpAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mpAddMouseClicked(evt);
            }
        });
        mpAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpAddActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 153, 0));
        jLabel10.setText("Description:");

        mpPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpPriceActionPerformed(evt);
            }
        });

        mpFoodName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpFoodNameActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 153, 0));
        jLabel11.setText("Price");

        jLabel12.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 153, 0));
        jLabel12.setText("Total");

        mpTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpTotalActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 153, 0));
        jLabel13.setText("Quantity");

        SpinnerNumberModel model = new SpinnerNumberModel(1, 1, null, 1);

        mpSpinner.setModel(model);
        mpSpinner.setToolTipText("");
        mpSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mpSpinnerPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mpName)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mpCuisine)
                            .addComponent(mpPrice)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mpDescription)
                            .addComponent(mpFoodName)
                            .addComponent(mpTotal)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mpSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(155, 155, 155))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mpAdd)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(mpCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mpFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mpPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mpTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(mpAdd)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Cuisine", "Food Name", "Price", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cartTable);

        menuItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ItemID", "Cuisine", "Name", "Description", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        menuItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuItemTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(menuItemTable);

        mpRemove.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        mpRemove.setText("REMOVE");
        mpRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpRemoveActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 153, 0));
        jLabel14.setText("Type of Menu");

        cuisineCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuisineComboboxActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 153, 0));
        jLabel9.setText("Dinning Option:");

        diningOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DINE_IN", "TAKEAWAY", "DELIVERY" }));
        diningOptionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diningOptionComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 153, 0));
        jLabel5.setText("Class: ");

        mpClass.setEnabled(false);
        mpClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpClassActionPerformed(evt);
            }
        });

        payButton.setBackground(new java.awt.Color(0, 255, 0));
        payButton.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        payButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/pay.png"))); // NOI18N
        payButton.setText("Pay");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpClass))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(diningOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(payButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(diningOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(mpClass, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(payButton)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        backButton.setBackground(new java.awt.Color(255, 153, 0));
        backButton.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 153, 0));
        jLabel15.setText("Average Rating:");

        jLabel16.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 153, 0));
        jLabel16.setText("Review:");

        reviewsArea.setEditable(false);
        reviewsArea.setColumns(20);
        reviewsArea.setRows(5);
        jScrollPane3.setViewportView(reviewsArea);

        avgRatingsField.setEditable(false);
        avgRatingsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgRatingsFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cuisineCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(backButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(avgRatingsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                                .addGap(42, 42, 42))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mpRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(5, 5, 5)
                        .addComponent(cuisineCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(avgRatingsField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mpRemove)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mpDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpDescriptionActionPerformed

    private void mpPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpPriceActionPerformed

    private void mpFoodNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpFoodNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpFoodNameActionPerformed
    
    private void mpNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpNameActionPerformed

    private void mpTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpTotalActionPerformed

    private void menuItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuItemTableMouseClicked
        //set data to textfield
        DefaultTableModel model = (DefaultTableModel) menuItemTable.getModel();
        int index = menuItemTable.getSelectedRow();
        int selectedRow = menuItemTable.getSelectedRow();
        
        String cuisine = (String) model.getValueAt(index, 1);
        String name = (String) model.getValueAt(index, 2);
        String description = (String) model.getValueAt(index, 3);
        String price = (String) model.getValueAt(index, 4);
        
        mpCuisine.setText(cuisine);
        mpFoodName.setText(name);
        mpDescription.setText(description);
        mpPrice.setText(price);
        mpAdd.setText("Add");
        
        updateTotal();
        
    }//GEN-LAST:event_menuItemTableMouseClicked

    private void updateTotal() {
    try {
        double price = Double.parseDouble(mpPrice.getText());
        int quantity = (Integer) mpSpinner.getValue();
        double total = price * quantity;
        mpTotal.setText(String.format("%.2f", total));
    } catch (NumberFormatException ex) {
        // Handle exception if price is not a valid number
        mpTotal.setText("0.0");
    }
}    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        updateTotal();
        mpSpinner.addChangeListener(e -> updateTotal());
        
        List<Menu> menus = fm.readMenus();
        List<String> cuisines = new ArrayList<>();

        // Extract unique cuisines from all menu items
        for (Menu menu : menus) {
            List<MenuItem> items = menu.getItems();
            for (MenuItem item : items) {
                String cuisine = item.getItemCuisine();
                if (!cuisines.contains(cuisine)) {
                    cuisines.add(cuisine);
                }
            }
        }

        // Add unique cuisines to the combo box
        for (String cuisine : cuisines) {
            cuisineCombobox.addItem(cuisine);
        }

        Controller controller = new Controller();
        DefaultTableModel model = controller.populateCustomerMenuTableModel((String) cuisineCombobox.getSelectedItem());
        menuItemTable.setModel(model);
        
        String cuisine = (String)cuisineCombobox.getSelectedItem();
        String vendorId = null;
        try (BufferedReader reader = new BufferedReader(new FileReader(menufile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 4 && (data[2] == null ? cuisine == null : data[2].equals(cuisine))){
                    vendorId = data[0];                
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Vendor vendor = (Vendor)fm.getUserById(vendorId);
        String avgRatings = String.valueOf(new Menu(vendor).getAverageRatings());
        if (avgRatings.equals(0)){
            avgRatings = "-";
        }
        
        String textblock;
        List<String> allReviews = (new Menu(vendor).getAllReviews());
        StringBuilder sb = new StringBuilder();
        for (String review : allReviews) {
            sb.append(review).append("\n");
        }
        textblock = sb.toString();
        
        if (allReviews.isEmpty()){
            textblock = "-";
        }
        avgRatingsField.setText(avgRatings);
        reviewsArea.setText(textblock);
        mpClass.setEnabled(false);
        
    }//GEN-LAST:event_formWindowOpened

    private void mpSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mpSpinnerPropertyChange
        // TODO add your handling code here:
        updateTotal();
    }//GEN-LAST:event_mpSpinnerPropertyChange

    private void diningOptionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diningOptionComboBoxActionPerformed
        // Get the selected item from the combo box
    String selectedItem = (String) diningOptionComboBox.getSelectedItem();

    // Check the selected item and enable/disable the mpClass JTextField accordingly
    if ("DELIVERY".equals(selectedItem)) {
        // Enable the JTextField for class input if Delivery is selected
        mpClass.setEnabled(true);
    } else {
        // Disable the JTextField for other options
        mpClass.setEnabled(false);
        mpClass.setText(""); // Optionally clear the text
    }
    }//GEN-LAST:event_diningOptionComboBoxActionPerformed

    private void mpAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mpAddMouseClicked
  
    }//GEN-LAST:event_mpAddMouseClicked
    
    
    
    private void mpAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpAddActionPerformed
        String customerID = customer.getUserId(); 
        String customerName = mpName.getText();
        String cuisine = mpCuisine.getText();
        String foodName = mpFoodName.getText();
//        String description = mpDescription.getText();
        Double price = Double.parseDouble(mpPrice.getText()); // Convert String to Double
        Integer quantity = (Integer) mpSpinner.getValue();
        Double total = Double.parseDouble(mpTotal.getText());
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        model.addRow(new Object[]{
            customer.getUserId(),
            customer.getName(),
            cuisine,
            foodName,
            price,
            quantity, 
            total
        });
        
        mpFoodName.setText("");
        mpDescription.setText("");
        mpPrice.setText("");
        mpTotal.setText("");
        mpSpinner.setValue(1);
    }//GEN-LAST:event_mpAddActionPerformed

    private void cuisineComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuisineComboboxActionPerformed
        // TODO add your handling code here:
        
        Controller controller = new Controller();
        DefaultTableModel model = controller.populateCustomerMenuTableModel((String) cuisineCombobox.getSelectedItem());
        menuItemTable.setModel(model);
        
        String cuisine = (String)cuisineCombobox.getSelectedItem();
        String vendorId = null;
        try (BufferedReader reader = new BufferedReader(new FileReader(menufile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 4 && (data[2] == null ? cuisine == null : data[2].equals(cuisine))){
                    vendorId = data[0];                
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Vendor vendor = (Vendor)fm.getUserById(vendorId);
        String avgRatings = String.valueOf(new Menu(vendor).getAverageRatings());
        if (avgRatings.equals(0)){
            avgRatings = "-";
        }
        
        String textblock;
        List<String> allReviews = (new Menu(vendor).getAllReviews());
        StringBuilder sb = new StringBuilder();
        for (String review : allReviews) {
            sb.append(review).append("\n");
        }
        textblock = sb.toString();
        
        if (allReviews.isEmpty()){
            textblock = "-";
        }
        avgRatingsField.setText(avgRatings);
        reviewsArea.setText(textblock);
        mpClass.setEnabled(false);
        mpCuisine.setText(cuisine);
        
    }//GEN-LAST:event_cuisineComboboxActionPerformed

    private void mpRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpRemoveActionPerformed
        // TODO add your handling code here:
         // Get the selected row index
        int selectedRowIndex = cartTable.getSelectedRow();

        // Check if there is a selected row
        if (selectedRowIndex != -1) {
            // Remove selected row from the table model
            DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
            model.removeRow(selectedRowIndex);

            // Optionally, remove the corresponding MenuItem object from your currentOrderItems list
            // Make sure your list is synchronized with your table model if you maintain such a list
            if (!currentOrderItems.isEmpty() && selectedRowIndex < currentOrderItems.size()) {
                currentOrderItems.remove(selectedRowIndex);
            }

            // Additional code to clear input fields if they correspond to the selected row
            mpCuisine.setText("");
            mpFoodName.setText("");
            mpDescription.setText("");
            mpPrice.setText("");
            mpTotal.setText("0.0");
            mpSpinner.setValue(1); // Reset spinner to its initial value
            mpClass.setText(""); // Clear the class text field
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to clear.");
        }
    }//GEN-LAST:event_mpRemoveActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed

        int row = 0; // replace with your row index
        int column = 2; // second column
        String cuisine = String.valueOf(cartTable.getValueAt(row, column));
        String selectedDiningOptionStr = (String) diningOptionComboBox.getSelectedItem();
        Order.DiningOption diningOption;

        // Map the selected string to the DiningOption enum
        if ("DINE_IN".equals(selectedDiningOptionStr)) {
            diningOption = Order.DiningOption.DINE_IN;
        } else if ("TAKEAWAY".equals(selectedDiningOptionStr)) {
            diningOption = Order.DiningOption.TAKEAWAY;
        } else {
            diningOption = Order.DiningOption.DELIVERY;
        }
        if (diningOption ==Order.DiningOption.DELIVERY && mpClass.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input classroom for delivery.");
        }else{
            String classroom = mpClass.getText();
            List<Menu> menus = fm.readMenus();

            Map<MenuItem, Integer> currentMenuItems  = new HashMap<>();

            // Iterate over each row in the cartTable
            for (int i = 0; i < cartTable.getRowCount(); i++) {
                // Get the food name and quantity from the table
                String foodName = cartTable.getValueAt(i, 3).toString();
                int quantity = Integer.parseInt(cartTable.getValueAt(i, 5).toString());

                // Find the corresponding MenuItem object
                for (Menu menu : menus) {
                    List<MenuItem> items = menu.getItems();
                    for (MenuItem item : items) {
                        if (item.getItemName().equals(foodName)) {
                            // Add the MenuItem and its quantity to the map
                            currentMenuItems.put(item, quantity);
                            break;
                        }
                    }
                }
            }

            for (Menu menu: menus){
                List<MenuItem> items = menu.getItems();
                for(MenuItem item:items){
                    if (item.getItemCuisine().equals(cuisine)) {
                        this.vendor = menu.getVendor();
                        break;
                    }
                }
                if (vendor != null) {
                    break;
                }
            }

            Controller controller = new Controller();
            String orderid = controller.generateOrderId(customer.getUserId());
    //            public Order(String orderId, String customerId, String vendorId, Map<MenuItem, Integer> currentMenuItems, Order.DiningOption diningOption, String classroomForDelivery) {

            Order currentOrder = new Order(orderid, customer.getUserId(), vendor.getUserId(), currentMenuItems, diningOption, classroom);
            List<Order> orders = new ArrayList();
            orders.add(currentOrder);

            double customerBalance = customer.getWallet().getBalance();
            double amountPayable = currentOrder.getTotalAmount();

            if (customerBalance < amountPayable){
                JOptionPane.showMessageDialog(this, "Insufficient Balance\n\nCurrent Balance: " + customerBalance + "\nAmount Payable: " + amountPayable);
            }else{
                Controller.autoAssignDeliveryRunner(currentOrder);
                customer.placeOrder(currentOrder);
                JOptionPane.showMessageDialog(this, "Payment Successful\n\nWallet Balance: " + customerBalance + "\nAmount Payable: " + amountPayable + "\nCurrent Balance: " + customer.getWallet().getBalance());
                fm.writeOrders(orders, true);
            }
            mpClass.setText("");
            cartTable.setModel(new DefaultTableModel());
        }
        
    }//GEN-LAST:event_payButtonActionPerformed

    private void mpClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpClassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpClassActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Customer_Dashboard cusd = new Customer_Dashboard(customer);
        cusd.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void avgRatingsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgRatingsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avgRatingsFieldActionPerformed
    
   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer_Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField avgRatingsField;
    private javax.swing.JButton backButton;
    private javax.swing.JTable cartTable;
    private javax.swing.JComboBox<String> cuisineCombobox;
    private javax.swing.JComboBox<String> diningOptionComboBox;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable menuItemTable;
    private javax.swing.JButton mpAdd;
    private javax.swing.JTextField mpClass;
    private javax.swing.JTextField mpCuisine;
    private javax.swing.JTextField mpDescription;
    private javax.swing.JTextField mpFoodName;
    private javax.swing.JTextField mpName;
    private javax.swing.JTextField mpPrice;
    private javax.swing.JButton mpRemove;
    private javax.swing.JSpinner mpSpinner;
    private javax.swing.JTextField mpTotal;
    private javax.swing.JButton payButton;
    private javax.swing.JTextArea reviewsArea;
    // End of variables declaration//GEN-END:variables
}
